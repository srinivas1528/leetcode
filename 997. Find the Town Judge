/*
In a town, there are n people labeled from 1 to n. There is a rumor that one of these people is secretly the town judge.

If the town judge exists, then:

The town judge trusts nobody.
Everybody (except for the town judge) trusts the town judge.
There is exactly one person that satisfies properties 1 and 2.
You are given an array trust where trust[i] = [ai, bi] representing that the person labeled ai trusts the person labeled bi.

Return the label of the town judge if the town judge exists and can be identified, or return -1 otherwise.

 

Example 1:

Input: n = 2, trust = [[1,2]]
Output: 2
Example 2:

Input: n = 3, trust = [[1,3],[2,3]]
Output: 3
Example 3:

Input: n = 3, trust = [[1,3],[2,3],[3,1]]
Output: -1
 

Constraints:

1 <= n <= 1000
0 <= trust.length <= 104
trust[i].length == 2
All the pairs of trust are unique.
ai != bi
1 <= ai, bi <= n

*/
class Solution {
    public int findJudge(int n, int[][] trust) {
        
        // intution: get outdegrees and indegrees for each person
        // later if outdegree is equal to zero and indegreee equals to n -1; we have found judge .
        
        
       int[] outdegree = new int[n+1];
       int[] indegree  = new int[n+1];
        
        for(int i = 0; i < trust.length; i++) {
            outdegree[trust[i][0]] =  outdegree[trust[i][0]] + 1; //incremenet outdegree for each trust edgee
            indegree[trust[i][1]] =  indegree[trust[i][1]] + 1;  //incremenet indegree for each trust edgee
        }
        
        // iterate through each person and match if the indegree and outdegree are as per judge reqs
        for(int  i = 1; i <= n; i++) {
            if(outdegree[i] == 0 && indegree[i] == n-1) {
                return i;  // judge found
            }
        }
        
          
        
        
        return -1;
        
    }
} 
// class Solution {
//     public int findJudge(int n, int[][] trust) {
        
//         // intution: only the judge should have trust count as n-1
//         // and after getting judge it should not have neighbours.
        
        
//         Map<Integer, Integer> map = new HashMap<>();  // used as a stroage for trust count for each person.
        
        
//         // edge case
//         if(trust.length == 0 && n == 1) {
//             return 1;
//         }        
        
//         // iterate through trust edges
//         for(int i = 0; i < trust.length; i++) {
//             if(!map.containsKey(trust[i][1])) {
//                 map.put(trust[i][1], 1);
//             } else {
//                 map.put(trust[i][1], map.get(trust[i][1]) + 1);
//             }
//         }
        
//        int judge  = -1;
//        for(Integer person: map.keySet()) {
//            if(map.get(person) ==  n-1) {  // trust count as n - 1; possibility of a judge
//                judge = person;         
//            }
//        }
    
//         // if judge is not assigned; return no judge found
//         if(judge == -1) {
//             return judge;
//         }
        
//        // iterate through trust edges; if judge is assigned
//        for(int i = 0; i < trust.length; i++) {   
//            if(trust[i][0]  != judge){  // judge dont trust anyone
//                continue;
//            } 
//            judge = -1;     // judge trust someone; fails the properites of a judge; so assign judge back to -1.
//            return judge;           
//        }    
        
        
//         return judge;
        
//     }
// } 

// Source: https://leetcode.com/problems/find-the-town-judge/
