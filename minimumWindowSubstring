class Solution {

    public String minWindow(String s, String t) {     
        
        Map<Character, Integer> cache = new HashMap<>();
        int m = s.length();
        int n = t.length();
        
        if(n > m) {
            return "";
        }
        
        //cache: load map with target t.
        for(int i = 0; i < t.length(); i++) {
            char c = t.charAt(i); 
            if(!cache.containsKey(c)) {
                cache.put(c, 1);
            } else {
                cache.put(c, cache.get(c)+1);
            }
        }
    
        int j = 0;
        String result = "";
        
        // Outer loop "i" will be used for contracting and shrinking window
        for(int  i = 0; i <= m - n; i++) {  
            
            // hunting phase (always matches the desired window of target 't')
            while(j < m && !isCacheEmpty(cache)) {
                char jChar = s.charAt(j);               
                if(cache.containsKey(jChar)) {
                    cache.put(jChar, cache.get(jChar)-1); // making cache empty
                }        
                j++;   
            }
            
            // store and update result
            if(isCacheEmpty(cache)) {
                String current = s.substring(i,j);
                if(result.equals("")) { 
                    result = current;
                }
                if(result.length() >= current.length()) {
                    result = current;
                }
                
                // drop a value from cache for i
                // making desire window fall out of range          
                char c = s.charAt(i);
                if(cache.containsKey(c) ) {
                    cache.put(c, cache.get(c)+1);   // making desire window fall out
                } 
            }            
        }      
        return result;     
    }
    
    public boolean isCacheEmpty(Map<Character, Integer> cache) {
        
        
        for(Integer count: cache.values()) {
            if(count > 0) {  // counts not empty; cache not  empty
                return false; 
            }        
        }
        return true;        
    }
}
